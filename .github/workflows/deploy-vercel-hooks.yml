name: Deploy to Vercel via Deploy Hooks

# 🚀 DEPLOY HOOKS APPROACH - WORKS FOR ALL CONTRIBUTORS!
# ======================================================
# This workflow uses Vercel Deploy Hooks - simple HTTP POST requests that require no authentication.
# Perfect for open source projects as it works for both maintainers and external contributors!
# 
# 🔧 SETUP REQUIRED:
# 1. Create Deploy Hooks in Vercel Dashboard:
#    - Go to each project → Settings → Git → Deploy Hooks
#    - Create hook for the branch you want to deploy (main, or specific branches)
#    - Copy the generated URLs
#
# 2. Add Deploy Hook URLs as Repository Variables (NOT secrets):
#    - Go to GitHub repo → Settings → Secrets and Variables → Actions → Variables tab
#    - Add: VERCEL_BACKEND_DEPLOY_HOOK = https://api.vercel.com/v1/integrations/deploy/prj_xxx/hookId
#    - Add: VERCEL_FRONTEND_DEPLOY_HOOK = https://api.vercel.com/v1/integrations/deploy/prj_yyy/hookId
#
# 3. Optional: Set up branch-specific hooks for preview deployments
#
# 🌟 BENEFITS:
# ✅ Works for external contributors (no authentication needed)
# ✅ No complex Vercel CLI setup
# ✅ No workflow failures due to missing secrets  
# ✅ Simple HTTP requests that always work
# ✅ Automatic deployments for every PR
# ✅ Same experience for everyone

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy-via-hooks:
    runs-on: ubuntu-latest
    outputs:
      backend-job-id: ${{ steps.backend-deploy.outputs.job-id }}
      frontend-job-id: ${{ steps.frontend-deploy.outputs.job-id }}
      deployment-triggered: ${{ steps.check-hooks.outputs.deployment-triggered }}
    
    steps:
      - name: 🔍 Check Deploy Hook Configuration
        id: check-hooks
        run: |
          echo "Checking Deploy Hook configuration..."
          
          backend_hook="${{ vars.VERCEL_BACKEND_DEPLOY_HOOK }}"
          frontend_hook="${{ vars.VERCEL_FRONTEND_DEPLOY_HOOK }}"
          
          if [ -n "$backend_hook" ] && [ -n "$frontend_hook" ]; then
            echo "✅ Both Deploy Hooks are configured"
            echo "deployment-triggered=true" >> $GITHUB_OUTPUT
          elif [ -n "$backend_hook" ] || [ -n "$frontend_hook" ]; then
            echo "⚠️ Only one Deploy Hook is configured"
            echo "deployment-triggered=partial" >> $GITHUB_OUTPUT
          else
            echo "❌ No Deploy Hooks configured"
            echo "deployment-triggered=false" >> $GITHUB_OUTPUT
          fi
          
          echo "📊 Configuration status:"
          echo "Backend Hook: ${{ vars.VERCEL_BACKEND_DEPLOY_HOOK != '' && '✅ Configured' || '❌ Missing' }}"
          echo "Frontend Hook: ${{ vars.VERCEL_FRONTEND_DEPLOY_HOOK != '' && '✅ Configured' || '❌ Missing' }}"

      - name: 🚀 Deploy Backend via Hook
        id: backend-deploy
        if: vars.VERCEL_BACKEND_DEPLOY_HOOK != ''
        run: |
          echo "🔥 Triggering backend deployment..."
          echo "Hook URL: ${{ vars.VERCEL_BACKEND_DEPLOY_HOOK }}"
          
          # Trigger deployment with error handling
          response=$(curl -s -w "\n%{http_code}" -X POST "${{ vars.VERCEL_BACKEND_DEPLOY_HOOK }}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Deploy-Hook") || {
            echo "❌ Failed to trigger backend deployment"
            exit 1
          }
          
          # Split response and status code
          http_code=$(echo "$response" | tail -n1)
          json_response=$(echo "$response" | head -n -1)
          
          echo "HTTP Status: $http_code"
          echo "Response: $json_response"
          
          if [ "$http_code" = "200" ] || [ "$http_code" = "201" ]; then
            # Extract job ID from response
            job_id=$(echo "$json_response" | grep -o '"id":"[^"]*"' | cut -d'"' -f4 | head -1)
            if [ -n "$job_id" ]; then
              echo "job-id=$job_id" >> $GITHUB_OUTPUT
              echo "✅ Backend deployment triggered successfully!"
              echo "📍 Job ID: $job_id"
            else
              echo "⚠️ Deployment triggered but couldn't extract job ID"
              echo "job-id=unknown" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Backend deployment failed with HTTP $http_code"
            echo "Response: $json_response"
            exit 1
          fi

      - name: 🌐 Deploy Frontend via Hook
        id: frontend-deploy
        if: vars.VERCEL_FRONTEND_DEPLOY_HOOK != ''
        run: |
          echo "🔥 Triggering frontend deployment..."
          echo "Hook URL: ${{ vars.VERCEL_FRONTEND_DEPLOY_HOOK }}"
          
          # Add small delay to ensure backend starts first
          echo "⏳ Waiting 5 seconds for backend to start..."
          sleep 5
          
          # Trigger deployment with error handling
          response=$(curl -s -w "\n%{http_code}" -X POST "${{ vars.VERCEL_FRONTEND_DEPLOY_HOOK }}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Deploy-Hook") || {
            echo "❌ Failed to trigger frontend deployment"
            exit 1
          }
          
          # Split response and status code
          http_code=$(echo "$response" | tail -n1)
          json_response=$(echo "$response" | head -n -1)
          
          echo "HTTP Status: $http_code"
          echo "Response: $json_response"
          
          if [ "$http_code" = "200" ] || [ "$http_code" = "201" ]; then
            # Extract job ID from response
            job_id=$(echo "$json_response" | grep -o '"id":"[^"]*"' | cut -d'"' -f4 | head -1)
            if [ -n "$job_id" ]; then
              echo "job-id=$job_id" >> $GITHUB_OUTPUT
              echo "✅ Frontend deployment triggered successfully!"
              echo "📍 Job ID: $job_id"
            else
              echo "⚠️ Deployment triggered but couldn't extract job ID"
              echo "job-id=unknown" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Frontend deployment failed with HTTP $http_code"
            echo "Response: $json_response"
            exit 1
          fi

      - name: 💬 Update PR with Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            const backendJobId = '${{ steps.backend-deploy.outputs.job-id }}';
            const frontendJobId = '${{ steps.frontend-deploy.outputs.job-id }}';
            const deploymentTriggered = '${{ steps.check-hooks.outputs.deployment-triggered }}';
            
            let commentBody = '';
            
            if (deploymentTriggered === 'true' && backendJobId && frontendJobId) {
              commentBody = `## 🚀 Deployments Triggered Successfully!

              Your changes are being deployed to Vercel via Deploy Hooks! 🎉

              ### 📊 Deployment Jobs
              - **🔧 Backend**: Job \`${backendJobId}\` 
              - **🌐 Frontend**: Job \`${frontendJobId}\`

              ### 🔍 Monitor Progress
              - Check [Vercel Dashboard](https://vercel.com/dashboard) for real-time status
              - Deployments typically complete in 1-3 minutes
              - Preview URLs will appear in Vercel dashboard once ready

              ### ✨ What's Happening
              1. Backend deployment started first
              2. Frontend deployment triggered (with backend integration)
              3. Both will be available at preview URLs when complete

              ---
              ⏳ **Status**: Deployments in progress... Check Vercel dashboard for preview URLs!
              
              *🔄 Last updated: ${new Date().toLocaleString()} UTC*`;
              
            } else if (deploymentTriggered === 'partial') {
              const activeDeployment = backendJobId ? 'Backend' : 'Frontend';
              const activeJobId = backendJobId || frontendJobId;
              
              commentBody = `## ⚠️ Partial Deployment Triggered

              Only **${activeDeployment}** deployment was triggered successfully.

              ### 📊 Active Deployment
              - **${activeDeployment}**: Job \`${activeJobId}\`

              ### 🔧 Action Required
              The other deployment hook appears to be missing or misconfigured. 
              Please check repository variables:
              - \`VERCEL_BACKEND_DEPLOY_HOOK\`
              - \`VERCEL_FRONTEND_DEPLOY_HOOK\`

              ### 🧪 Test Locally Meanwhile
              \`\`\`bash
              # Backend
              cd backend && npm install && npm run dev

              # Frontend (new terminal)  
              cd frontend && npm install && npm run dev
              \`\`\``;
              
            } else if (deploymentTriggered === 'false') {
              commentBody = `## 🔧 Deploy Hooks Not Set Up

              No Deploy Hook deployments were triggered because the hooks haven't been configured yet.

              ### 🛠️ Setup Instructions for Maintainers

              #### 1. Create Deploy Hooks in Vercel
              For **each project** (backend & frontend):
              - Go to Vercel Dashboard → Project → Settings → Git
              - Scroll to "Deploy Hooks" section  
              - Click "Create Hook"
              - Name: \`GitHub-PR-Previews\` (or similar)
              - Branch: \`main\` (or your default branch)
              - Copy the generated URL

              #### 2. Add URLs as Repository Variables
              - Go to GitHub repo → Settings → Secrets and Variables → Actions
              - Click **Variables** tab (not Secrets!)
              - Add these variables:
                - \`VERCEL_BACKEND_DEPLOY_HOOK\` = your backend hook URL
                - \`VERCEL_FRONTEND_DEPLOY_HOOK\` = your frontend hook URL

              #### 3. Test the Setup
              - Create a new PR or push to this PR
              - The workflow will automatically trigger deployments! 🎉

              ### 🧪 Testing Changes Locally
              \`\`\`bash
              # Backend
              cd backend && npm install && npm run dev

              # Frontend (new terminal)
              cd frontend && npm install && npm run dev
              \`\`\`

              ### 🌟 Benefits of Deploy Hooks
              - ✅ Works for **all contributors** (no authentication issues)
              - ✅ Simple HTTP requests (no complex CLI setup)
              - ✅ Automatic deployments for every PR
              - ✅ No workflow failures due to missing secrets`;
              
            } else {
              commentBody = `## ❌ Deployment Issues

              There was an issue triggering the deployments. Please check the workflow logs for details.

              ### 🔧 Troubleshooting
              - Verify Deploy Hook URLs are correct
              - Check Vercel project settings
              - Ensure hooks are for the correct branch

              ### 🧪 Test Locally
              \`\`\`bash
              # Backend
              cd backend && npm install && npm run dev

              # Frontend (new terminal)
              cd frontend && npm install && npm run dev
              \`\`\``;
            }

            commentBody += `
            
            <!-- DEPLOY_HOOKS_COMMENT_MARKER -->`;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('<!-- DEPLOY_HOOKS_COMMENT_MARKER -->')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log('✅ Updated existing Deploy Hooks comment');
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log('✅ Created new Deploy Hooks comment');
            }

  workflow-summary:
    runs-on: ubuntu-latest
    needs: deploy-via-hooks
    if: always()
    
    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "🔍 Deploy Hooks Workflow Summary"
          echo "================================"
          
          deployment_status="${{ needs.deploy-via-hooks.outputs.deployment-triggered }}"
          backend_job="${{ needs.deploy-via-hooks.outputs.backend-job-id }}"
          frontend_job="${{ needs.deploy-via-hooks.outputs.frontend-job-id }}"
          
          case "$deployment_status" in
            "true")
              echo "✅ SUCCESS: Both deployments triggered successfully"
              echo "🔧 Backend Job: $backend_job"
              echo "🌐 Frontend Job: $frontend_job"
              echo ""
              echo "🔍 Next Steps:"
              echo "- Monitor progress in Vercel Dashboard"
              echo "- Preview URLs will be available when deployments complete"
              ;;
            "partial")
              echo "⚠️ PARTIAL: Only one deployment was triggered"
              echo "Active Job: ${backend_job:-$frontend_job}"
              echo ""
              echo "🔧 Action Required:"
              echo "- Check Deploy Hook configuration"
              echo "- Ensure both VERCEL_BACKEND_DEPLOY_HOOK and VERCEL_FRONTEND_DEPLOY_HOOK are set"
              ;;
            "false")
              echo "❌ NOT CONFIGURED: No Deploy Hooks set up"
              echo ""
              echo "🛠️ Setup Required:"
              echo "1. Create Deploy Hooks in Vercel Dashboard"
              echo "2. Add hook URLs as repository variables"
              echo "3. Re-run this workflow"
              ;;
            *)
              echo "❓ UNKNOWN: Unexpected deployment status"
              echo "Check workflow logs for details"
              ;;
          esac
          
          echo ""
          echo "🌟 Deploy Hooks Benefits:"
          echo "- Works for ALL contributors (maintainers + external)"
          echo "- No authentication required"
          echo "- Simple HTTP requests"
          echo "- Automatic deployments"
          echo "- No complex CLI setup"
          
          # Create GitHub Actions Summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🚀 Deploy Hooks Workflow Results
          
          **Deployment Status**: $deployment_status
          
          $(case "$deployment_status" in
            "true")
              echo "### ✅ Both Deployments Triggered"
              echo "- **Backend Job**: \`$backend_job\`"
              echo "- **Frontend Job**: \`$frontend_job\`"
              echo ""
              echo "Monitor progress in [Vercel Dashboard](https://vercel.com/dashboard)"
              ;;
            "partial")
              echo "### ⚠️ Partial Deployment"
              echo "Only one deployment was triggered. Check Deploy Hook configuration."
              ;;
            "false")
              echo "### 🔧 Setup Required"
              echo "Deploy Hooks need to be configured. See PR comment for instructions."
              ;;
            *)
              echo "### ❓ Unknown Status"
              echo "Check workflow logs for details."
              ;;
          esac)
          
          ---
          
          ### 🌟 About Deploy Hooks
          This workflow uses [Vercel Deploy Hooks](https://vercel.com/docs/deploy-hooks) - simple HTTP endpoints that trigger deployments without requiring authentication. Perfect for open source projects!
          
          EOF 