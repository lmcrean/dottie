name: Deploy to Vercel via CLI

# 🚀 VERCEL CLI APPROACH - HANDLES MONOREPOS PERFECTLY!
# =====================================================
# This workflow uses Vercel CLI with proper directory handling for monorepos.
# Works for backend/ and frontend/ subdirectories automatically!
# 
# 🔧 SETUP REQUIRED:
# 1. Add Vercel tokens as Repository Secrets:
#    - Go to GitHub repo → Settings → Secrets and Variables → Actions → Secrets tab
#    - Add: VERCEL_TOKEN = your Vercel API token (from vercel.com/account/tokens)
#    - Add: VERCEL_ORG_ID = your Vercel team/org ID 
#    - Add: VERCEL_PROJECT_ID_BACKEND = backend project ID
#    - Add: VERCEL_PROJECT_ID_FRONTEND = frontend project ID
#
# 2. Get Project IDs:
#    - Run `npx vercel link` in backend/ and frontend/ directories
#    - Copy project IDs from .vercel/project.json files
#
# 🌟 BENEFITS:
# ✅ Handles monorepo structure perfectly
# ✅ Deploys from correct subdirectories (backend/, frontend/)  
# ✅ Full control over build process
# ✅ Works with any project structure
# ✅ Proper dependency handling

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy-vercel:
    runs-on: ubuntu-latest
    outputs:
      backend-url: ${{ steps.backend-deploy.outputs.deployment-url }}
      frontend-url: ${{ steps.frontend-deploy.outputs.deployment-url }}
      deployment-status: ${{ steps.check-setup.outputs.deployment-status }}
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
      
      - name: 🔍 Check Vercel Configuration
        id: check-setup
        run: |
          echo "Checking Vercel configuration..."
          
          # Check for required secrets
          has_token="${{ secrets.VERCEL_TOKEN != '' }}"
          has_org="${{ secrets.VERCEL_ORG_ID != '' }}"
          has_backend_project="${{ secrets.VERCEL_PROJECT_ID_BACKEND != '' }}"
          has_frontend_project="${{ secrets.VERCEL_PROJECT_ID_FRONTEND != '' }}"
          
          echo "📊 Configuration status:"
          echo "Vercel Token: ${{ secrets.VERCEL_TOKEN != '' && '✅ Configured' || '❌ Missing' }}"
          echo "Org ID: ${{ secrets.VERCEL_ORG_ID != '' && '✅ Configured' || '❌ Missing' }}"
          echo "Backend Project ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND != '' && '✅ Configured' || '❌ Missing' }}"
          echo "Frontend Project ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND != '' && '✅ Configured' || '❌ Missing' }}"
          
          if [[ "$has_token" == "true" && "$has_org" == "true" && "$has_backend_project" == "true" && "$has_frontend_project" == "true" ]]; then
            echo "deployment-status=ready" >> $GITHUB_OUTPUT
            echo "✅ All configuration is present"
          else
            echo "deployment-status=missing-config" >> $GITHUB_OUTPUT
            echo "❌ Missing required configuration"
          fi

      - name: 🔧 Install Vercel CLI
        if: steps.check-setup.outputs.deployment-status == 'ready'
        run: npm install -g vercel@latest

      - name: 🚀 Deploy Backend to Vercel
        id: backend-deploy
        if: steps.check-setup.outputs.deployment-status == 'ready'
        working-directory: ./backend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
        run: |
          echo "🔥 Deploying backend from backend/ directory..."
          
          # Deploy with Vercel CLI
          deployment_url=$(vercel deploy --token=$VERCEL_TOKEN --yes --force)
          
          if [ $? -eq 0 ] && [ -n "$deployment_url" ]; then
            echo "deployment-url=$deployment_url" >> $GITHUB_OUTPUT
            echo "✅ Backend deployment successful!"
            echo "📍 Backend URL: $deployment_url"
          else
            echo "❌ Backend deployment failed"
            exit 1
          fi

      - name: 🌐 Deploy Frontend to Vercel  
        id: frontend-deploy
        if: steps.check-setup.outputs.deployment-status == 'ready'
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
        run: |
          echo "🔥 Deploying frontend from frontend/ directory..."
          
          # Add small delay to ensure backend is ready
          echo "⏳ Waiting 10 seconds for backend to be ready..."
          sleep 10
          
          # Deploy with Vercel CLI
          deployment_url=$(vercel deploy --token=$VERCEL_TOKEN --yes --force)
          
          if [ $? -eq 0 ] && [ -n "$deployment_url" ]; then
            echo "deployment-url=$deployment_url" >> $GITHUB_OUTPUT
            echo "✅ Frontend deployment successful!"
            echo "📍 Frontend URL: $deployment_url"
          else
            echo "❌ Frontend deployment failed"
            exit 1
          fi

      - name: 💬 Update PR with Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            const backendUrl = '${{ steps.backend-deploy.outputs.deployment-url }}';
            const frontendUrl = '${{ steps.frontend-deploy.outputs.deployment-url }}';
            const deploymentStatus = '${{ steps.check-setup.outputs.deployment-status }}';
            
            let commentBody = '';
            
            if (deploymentStatus === 'ready' && backendUrl && frontendUrl) {
              commentBody = `## 🚀 Vercel Deployments Successful!

              Your monorepo has been deployed successfully! 🎉

              ### 🔗 Preview URLs
              - **🔧 Backend**: ${backendUrl}
              - **🌐 Frontend**: ${frontendUrl}

              ### ✨ What Happened
              1. ✅ Backend deployed from \`backend/\` directory
              2. ✅ Frontend deployed from \`frontend/\` directory  
              3. ✅ Both deployments completed successfully

              ### 🧪 Test Your Changes
              Click the URLs above to test your changes in the preview environment!

              ---
              ⚡ **Status**: Deployments complete and ready for testing!
              
              *🔄 Last updated: ${new Date().toLocaleString()} UTC*`;
              
            } else if (deploymentStatus === 'missing-config') {
              commentBody = `## 🔧 Vercel CLI Not Set Up

              Vercel CLI deployments are not configured yet. This approach handles monorepos perfectly!

              ### 🛠️ Setup Instructions for Maintainers

              #### 1. Get Vercel API Token
              - Go to [Vercel Account Settings](https://vercel.com/account/tokens)
              - Create a new token
              - Copy the token value

              #### 2. Get Organization ID
              \`\`\`bash
              npx vercel teams list
              # Copy your team/org ID
              \`\`\`

              #### 3. Get Project IDs
              \`\`\`bash
              # In backend directory
              cd backend && npx vercel link
              cat .vercel/project.json  # Copy projectId

              # In frontend directory  
              cd frontend && npx vercel link
              cat .vercel/project.json  # Copy projectId
              \`\`\`

              #### 4. Add GitHub Secrets
              Go to **Settings** → **Secrets and Variables** → **Actions** → **Secrets**:
              - \`VERCEL_TOKEN\` = your API token
              - \`VERCEL_ORG_ID\` = your organization ID
              - \`VERCEL_PROJECT_ID_BACKEND\` = backend project ID
              - \`VERCEL_PROJECT_ID_FRONTEND\` = frontend project ID

              #### 5. Test the Setup
              - Push to this PR or create a new PR
              - Deployments will automatically work from correct directories! 🎉

              ### 🧪 Testing Changes Locally
              \`\`\`bash
              # Backend
              cd backend && npm install && npm run dev

              # Frontend (new terminal)
              cd frontend && npm install && npm run dev
              \`\`\`

              ### 🌟 Benefits of Vercel CLI
              - ✅ Perfect monorepo support (deploys from subdirectories)
              - ✅ Full control over build process
              - ✅ Works with any project structure
              - ✅ Handles dependencies correctly
              - ✅ Preview URLs for every PR`;
              
            } else {
              commentBody = `## ❌ Deployment Issues

              There was an issue with the Vercel CLI deployments. Please check the workflow logs for details.

              ### 🔧 Troubleshooting
              - Verify all Vercel secrets are set correctly
              - Check project IDs match your Vercel projects
              - Ensure API token has correct permissions

              ### 🧪 Test Locally
              \`\`\`bash
              # Backend
              cd backend && npm install && npm run dev

              # Frontend (new terminal)
              cd frontend && npm install && npm run dev
              \`\`\``;
            }

            commentBody += `
            
            <!-- VERCEL_CLI_COMMENT_MARKER -->`;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('<!-- VERCEL_CLI_COMMENT_MARKER -->')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log('✅ Updated existing Vercel CLI comment');
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log('✅ Created new Vercel CLI comment');
            }

  workflow-summary:
    runs-on: ubuntu-latest
    needs: deploy-vercel
    if: always()
    
    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "🔍 Vercel CLI Workflow Summary"
          echo "=============================="
          
          deployment_status="${{ needs.deploy-vercel.outputs.deployment-status }}"
          backend_url="${{ needs.deploy-vercel.outputs.backend-url }}"
          frontend_url="${{ needs.deploy-vercel.outputs.frontend-url }}"
          
          case "$deployment_status" in
            "ready")
              if [[ -n "$backend_url" && -n "$frontend_url" ]]; then
                echo "✅ SUCCESS: Both deployments completed successfully"
                echo "🔧 Backend: $backend_url"
                echo "🌐 Frontend: $frontend_url"
                echo ""
                echo "🎉 Your monorepo is deployed and ready for testing!"
              else
                echo "⚠️ PARTIAL: Some deployments may have failed"
                echo "Backend: ${backend_url:-❌ Failed}"
                echo "Frontend: ${frontend_url:-❌ Failed}"
              fi
              ;;
            "missing-config")
              echo "❌ NOT CONFIGURED: Vercel CLI secrets not set up"
              echo ""
              echo "🛠️ Setup Required:"
              echo "1. Get Vercel API token and project IDs"
              echo "2. Add secrets to GitHub repository"
              echo "3. Re-run this workflow"
              ;;
            *)
              echo "❓ UNKNOWN: Unexpected deployment status"
              echo "Check workflow logs for details"
              ;;
          esac
          
          echo ""
          echo "🌟 Vercel CLI Benefits:"
          echo "- Perfect monorepo support"
          echo "- Deploys from correct subdirectories (backend/, frontend/)"
          echo "- Full control over build process"
          echo "- Works with any project structure"
          
          # Create GitHub Actions Summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🚀 Vercel CLI Deployment Results
          
          **Status**: $deployment_status
          
          $(case "$deployment_status" in
            "ready")
              if [[ -n "$backend_url" && -n "$frontend_url" ]]; then
                echo "### ✅ Monorepo Deployed Successfully"
                echo "- **🔧 Backend**: [$backend_url]($backend_url)"
                echo "- **🌐 Frontend**: [$frontend_url]($frontend_url)"
                echo ""
                echo "🎉 Both applications deployed from their respective directories!"
              else
                echo "### ⚠️ Partial Deployment"
                echo "Some deployments may have failed. Check logs for details."
              fi
              ;;
            "missing-config")
              echo "### 🔧 Setup Required"
              echo "Vercel CLI needs to be configured with API tokens and project IDs."
              ;;
            *)
              echo "### ❓ Unknown Status"
              echo "Check workflow logs for details."
              ;;
          esac)
          
          ---
          
          ### 🏗️ About Vercel CLI
          This workflow uses the [Vercel CLI](https://vercel.com/docs/cli) to deploy directly from subdirectories, perfect for monorepos like yours with \`backend/\` and \`frontend/\` folders.
          
          EOF 